name: Cross-compilation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: focusbuddy-x86_64-linux
            features: ""
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: focusbuddy-x86_64-linux-full
            features: "system-deps"
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: focusbuddy-aarch64-linux
            features: ""
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: focusbuddy-aarch64-linux-full
            features: "system-deps"
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: focusbuddy-x86_64-windows
            features: ""
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: focusbuddy-x86_64-macos
            features: ""
      fail-fast: false

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
        targets: ${{ matrix.target }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          focusbuddy/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('focusbuddy/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest' && matrix.features == 'system-deps'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config libssl-dev gcc-aarch64-linux-gnu
        if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
          rustup target add aarch64-unknown-linux-gnu
        fi

    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        rustup target add x86_64-pc-windows-msvc

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install pkg-config openssl

    - name: Setup project
      working-directory: focusbuddy
      run: |
        # Create necessary directories
        mkdir -p target
        
        # Create or update focusbuddy.json
        echo '{"focus_duration": 25, "break_duration": 5, "tasks": []}' > focusbuddy.json
        chmod 644 focusbuddy.json
        
        # Create test files
        echo "Test task 1" > test_tasks.txt
        echo "Test task 2" >> test_tasks.txt
        chmod 644 test_tasks.txt
        
        # Verify project structure
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        
        # Verify Cargo.toml
        if [ ! -f Cargo.toml ]; then
          echo "Error: Cargo.toml not found"
          exit 1
        fi
        echo "Cargo.toml contents:"
        cat Cargo.toml

    - name: Build
      working-directory: focusbuddy
      env:
        PKG_CONFIG_PATH: ${{ matrix.os == 'macos-latest' && '/usr/local/opt/openssl/lib/pkgconfig' || '' }}
        RUST_BACKTRACE: 1
        RUSTFLAGS: "-C target-feature=+crt-static"
        CARGO_TARGET_DIR: target
      run: |
        # Show environment info
        echo "Rust version:"
        rustc --version
        echo "Rustup targets:"
        rustup show
        echo "Environment variables:"
        env | grep -E 'RUST|CARGO'
        
        # Clean and build
        echo "Cleaning previous build..."
        cargo clean
        echo "Updating dependencies..."
        cargo update
        echo "Checking build..."
        if [ "${{ matrix.features }}" != "" ]; then
          cargo check --target ${{ matrix.target }} --features ${{ matrix.features }} -v
        else
          cargo check --target ${{ matrix.target }} -v
        fi
        echo "Building release..."
        if [ "${{ matrix.features }}" != "" ]; then
          cargo build --release --target ${{ matrix.target }} --features ${{ matrix.features }} -v
        else
          cargo build --release --target ${{ matrix.target }} -v
        fi
        
        # Verify build output
        echo "Checking build output..."
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          ls -la target/${{ matrix.target }}/release/focusbuddy.exe
          if [ ! -f target/${{ matrix.target }}/release/focusbuddy.exe ]; then
            echo "Error: Build output not found"
            exit 1
          fi
        else
          ls -la target/${{ matrix.target }}/release/focusbuddy
          if [ ! -f target/${{ matrix.target }}/release/focusbuddy ]; then
            echo "Error: Build output not found"
            exit 1
          fi
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: focusbuddy/target/${{ matrix.target }}/release/focusbuddy*
        if-no-files-found: error 