name: Cross-compilation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        target: [x86_64-unknown-linux-gnu, x86_64-pc-windows-msvc, x86_64-apple-darwin]

    steps:
    - uses: actions/checkout@v3

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        components: rustfmt, clippy
        target: ${{ matrix.target }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          focusbuddy/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('focusbuddy/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config libssl-dev libnotify-dev

    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        rustup target add x86_64-pc-windows-msvc

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install pkg-config openssl

    - name: Setup project
      working-directory: focusbuddy
      run: |
        # Create necessary directories
        mkdir -p target
        
        # Create or update focusbuddy.json
        echo '{"focus_duration": 25, "break_duration": 5, "tasks": []}' > focusbuddy.json
        chmod 644 focusbuddy.json
        
        # Create test files
        echo "Test task 1" > test_tasks.txt
        echo "Test task 2" >> test_tasks.txt
        chmod 644 test_tasks.txt
        
        # Verify project structure
        ls -la
        pwd
        
        # Update Cargo.toml if needed
        if [ ! -f Cargo.toml ]; then
          echo "Error: Cargo.toml not found"
          exit 1
        fi

    - name: Build
      working-directory: focusbuddy
      env:
        PKG_CONFIG_PATH: ${{ matrix.os == 'macos-latest' && '/usr/local/opt/openssl/lib/pkgconfig' || '' }}
      run: |
        # Show Rust version and target
        rustc --version
        rustup show
        
        # Clean and build
        cargo clean
        cargo update
        cargo check --target ${{ matrix.target }}
        cargo build --release --target ${{ matrix.target }}
        
        # Verify build output
        ls -la target/${{ matrix.target }}/release/

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: focusbuddy-${{ matrix.target }}
        path: focusbuddy/target/${{ matrix.target }}/release/focusbuddy* 